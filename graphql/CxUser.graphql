type CxDependency {
  ObjectType: String
  Ids: [Int]
}

input CxDependencyInput {
  ObjectType: String!
  Ids: [Int]!
}

type CxUser {
  Party: IxParty
  Level: IxLevel
  WebPrivileges: [IxLookupValue]
  Privileges: [IxLookupValue]
  Administrator: Boolean
  ReadOnly: Boolean
  WebLevel: CxUserWebLevel
  Description: String
  ObjectType: CxUserObjectType
  Id: ID!
  Divisions: [IxLookupValue]
  Tags: [IxAttribute__String__]
  Dependencies: [CxDependency]
  Attachments: [IxDocument]
  HasAttachments: Boolean
}

input CxUserInput {
  Party: IxPartyDO!
  Level: IxLevelDO!
  WebPrivileges: [IxLookupValueDO]
  Privileges: [IxLookupValueDO]
  WebLevel: CxUserWebLevel
  Description: String
  ObjectType: CxUserObjectType
  Id: ID!
  Divisions: [IxLookupValueDO]
  Tags: [IxAttribute__String__Input]
  Attachments: [IxDocumentInput]
  HasAttachments: Boolean
}

enum CxUserObjectType {
  User
}

enum CxUserWebLevel {
  None
  All
  Personal
}

input FilterInput {
  name: String!
  values: [String]
  child: String
  invert: Boolean = false
}

type IxAddress {
  Street: String
  StreetDetails: String
  State: IxLookupValue
  City: String
  ZipCode: String
  Geocode: IxGeocode
  ObjectType: IxAddressObjectType
  Id: ID!
}

enum IxAddressObjectType {
  Address
}

type IxAttribute__String__ {
  BaseObject: String
  AttributeId: ID
  New: Boolean
  Dependencies: [CxDependency]
  ObjectType: IxAttributeStringObjectType
  Id: ID!
  Name: String
  Description: String
}

input IxAttribute__String__Input {
  BaseObject: String!
  AttributeId: ID!
  New: Boolean
  Dependencies: [CxDependencyInput]
  ObjectType: IxAttributeStringObjectType
  Id: ID!
  Name: String
  Description: String
}

enum IxAttributeStringObjectType {
  Attribute
}

type IxDocument {
  Attached: Boolean
  FileLocation: String
  FullName: String
  DocumentType: IxLookupValue
  New: Boolean
  Dependencies: [CxDependency]
  ObjectType: IxDocumentObjectType
  Id: ID!
  Name: String
  Description: String
}

input IxDocumentInput {
  Attached: Boolean
  FileLocation: String!
  FullName: String
  DocumentType: IxLookupValueDO
  New: Boolean
  Dependencies: [CxDependencyInput]
  ObjectType: IxDocumentObjectType
  Id: ID!
  Name: String!
  Description: String
}

enum IxDocumentObjectType {
  Document
}

type IxEmail {
  Id: ID!
  Email: String
  Name: String
  Description: String
}

type IxGeocode {
  Lat: Float
  Lng: Float
  Source: IxGeocodeSource
}

enum IxGeocodeSource {
  Action
  Owner
  GPSService
}

type IxLevel {
  BaseObject: String
  ObjectType: IxLevelObjectType
  Id: ID!
  Name: String
  Description: String
  New: Boolean
  Dependencies: [CxDependency]
}

input IxLevelDO {
  Id: ID!
}

enum IxLevelObjectType {
  Level
}

type IxLookupValue {
  BaseObject: String
  ObjectType: IxLookupValueObjectType
  Id: ID!
  Name: String
  Description: String
  New: Boolean
  Dependencies: [CxDependency]
}

input IxLookupValueDO {
  Id: ID!
}

enum IxLookupValueObjectType {
  State
  Attribute
  PurchaseOrderStatus
  Level
  Privilege
  TimeEntryType
  CompanyType
  JobStatus
  WebPrivilege
  DocumentType
  TimeEntryLaborClass
  JobPriority
  JobSubtype
  JobType
  Division
  LaborClass
  Language
  License
  Minority
  Skill
  Training
  Union
  JobCertification
}

type IxParty {
  Emails: [IxEmail]
  PhoneNumbers: [IxPhoneNumber]
  ObjectType: IxPartyObjectType
  Id: ID!
  Name: String
  Description: String
  New: Boolean
  Dependencies: [CxDependency]
  Address: IxAddress
  Tags: [IxAttribute__String__]
}

input IxPartyDO {
  Id: ID!
}

enum IxPartyObjectType {
  Party
  Company
  Subcontractor
  Plant
}

type IxPhoneNumber {
  Id: ID!
  PhoneNumber: String
  Name: String
  Description: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input methodInput {
  name: String!
  args: JSONObject
}

input methodsByItemInput {
  indices: [Int]
  methods: [methodInput]
  noEdit: String
}

extend type Mutation {
  cxUsers_onSave(data: [CxUserInput], objectType: String = "User", operation: String = "edit", properties: [String], methodsByItem: [methodsByItemInput]): [CxUser]
  cxUsers_onDelete(data: [String], objectType: String = "User", operation: String = "delete"): [CxUser]
}

extend type Query {
  cxUsers(filters: [FilterInput], objectType: String = "User"): [CxUser]
}
