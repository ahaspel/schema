type CxDependency {
  ObjectType: String
  Ids: [Int]
}

input CxDependencyInput {
  ObjectType: String!
  Ids: [Int]!
}

type CxLevel {
  Privileges: [CxLevelPrivileges]
  ObjectType: CxLevelObjectType
  ObjectPrivileges: [CxObjectPrivilege]
  Editable: Boolean
  Name: String
  Dependencies: [CxDependency]
  Id: ID!
  Description: String
}

input CxLevelInput {
  Privileges: [CxLevelPrivileges]
  ObjectPrivileges: [CxObjectPrivilegeInput]
  Editable: Boolean
  Name: String!
  Dependencies: [CxDependencyInput]
  Id: ID!
  Description: String
}

enum CxLevelObjectType {
  Level
}

enum CxLevelPrivileges {
  DesktopUser
  MobileUser
  MobileManager
}

type CxObjectPrivilege {
  ObjectType: String
  ObjectPrivileges: [CxObjectPrivilegeObjectPrivileges]
  Editable: Boolean
}

input CxObjectPrivilegeInput {
  ObjectType: String!
  ObjectPrivileges: [CxObjectPrivilegeObjectPrivileges]!
  Editable: Boolean
}

enum CxObjectPrivilegeObjectPrivileges {
  Delete
  Add
  Edit
  Read
}

input FilterInput {
  name: String!
  values: [String]
  child: String
  invert: Boolean = false
}

extend type Mutation {
  cxLevels_onSave(data: [CxLevelInput], objectType: String = "Level", operation: String = "edit", properties: [String]): [CxLevel]
  cxLevels_onDelete(data: [String], objectType: String = "Level", operation: String = "delete"): [CxLevel]
}

extend type Query {
  cxLevels(filters: [FilterInput], objectType: String = "Level"): [CxLevel]
}
