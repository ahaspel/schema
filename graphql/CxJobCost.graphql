type CxDependency {
  ObjectType: String
  Ids: [Int]
}

input CxDependencyInput {
  ObjectType: String!
  Ids: [Int]!
}

type CxJobCost {
  CostPerUnit: IxMoney
  CostCode: IxCostCode
  TotalAmount: Float
  ExpectedDailyAmount: Float
  ObjectType: CxJobCostObjectType
  Name: String
  Description: String
  Dependencies: [CxDependency]
  Id: ID!
}

input CxJobCostInput {
  CostPerUnit: IxMoneyInput
  CostCode: IxCostCodeInput!
  TotalAmount: Float!
  ExpectedDailyAmount: Float
  ObjectType: CxJobCostObjectType
  Name: String
  Description: String
  Dependencies: [CxDependencyInput]
  Id: ID!
}

enum CxJobCostObjectType {
  JobCost
}

input FilterInput {
  name: String!
  values: [String]
  child: String
  invert: Boolean = false
}

type IxCostCode {
  UnitCost: IxUnitCost
  Global: Boolean
  BaseObject: String
  ObjectType: IxCostCodeObjectType
  Id: ID!
  Name: String
  Description: String
  Dependencies: [CxDependency]
}

input IxCostCodeInput {
  UnitCost: IxUnitCostInput!
  Global: Boolean
  BaseObject: String
  ObjectType: IxCostCodeObjectType
  Id: ID!
  Name: String!
  Description: String
  Dependencies: [CxDependencyInput]
}

enum IxCostCodeObjectType {
  CostCode
}

type IxMoney {
  Unit: IxUnit
  Quantity: Float
}

input IxMoneyInput {
  Unit: IxUnitDO!
  Quantity: Float!
}

type IxUnit {
  UnitType: IxUnitUnitType
  Scalar: Float
  Integral: Boolean
  BaseObject: String
  ObjectType: IxUnitObjectType
  Id: ID!
  Name: String
  Description: String
}

type IxUnitCost {
  Unit: IxUnit
  Cost: IxMoney
  Notes: String
}

input IxUnitCostInput {
  Unit: IxUnitDO!
  Cost: IxMoneyInput!
  Notes: String
}

input IxUnitDO {
  Id: ID!
}

enum IxUnitObjectType {
  Unit
}

enum IxUnitUnitType {
  Time
  Length
  Weight
  Area
  Volume
  Money
  Self
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input methodInput {
  name: String!
  args: JSONObject
}

input methodsByItemInput {
  indices: [Int]
  methods: [methodInput]
  noEdit: String
}

extend type Mutation {
  cxJobCosts_onSave(data: [CxJobCostInput], filters: [FilterInput], objectType: String = "JobCost", operation: String = "edit", properties: [String], methodsByItem: [methodsByItemInput]): [CxJobCost]
  cxJobCosts_onDelete(data: [String], objectType: String = "JobCost", operation: String = "delete"): [CxJobCost]
}

extend type Query {
  cxJobCosts(filters: [FilterInput], objectType: String = "JobCost"): [CxJobCost]
}
